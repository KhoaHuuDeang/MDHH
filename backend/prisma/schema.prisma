generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String? @db.Uuid
  type                String? @db.VarChar
  provider            String? @db.VarChar
  provider_account_id String? @db.VarChar
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String? @db.VarChar
  scope               String? @db.VarChar
  id_token            String?
  session_state       String? @db.VarChar
  metadata            Json?   @db.Json
  users               users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
}

model classification_levels {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String?   @unique @db.VarChar
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  folders     folders[]
  tags        tags[]
}

model comments {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id              String?                @db.Uuid
  resource_id          String?                @db.Uuid
  folder_id            String?                @db.Uuid
  parent_id            String?                @db.Uuid
  content              String?
  is_deleted           Boolean?               @default(false)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  folders              folders?               @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments             comments?              @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_comments       comments[]             @relation("commentsTocomments")
  resources            resources?             @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                users?                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notification_targets notification_targets[]
}

model downloads {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?    @db.Uuid
  resource_id   String?    @db.Uuid
  downloaded_at DateTime?  @default(now()) @db.Timestamptz(6)
  resources     resources? @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model folder_files {
  folder_id   String    @db.Uuid
  resource_id String    @db.Uuid
  folders     folders   @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources   resources @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([folder_id, resource_id])
}

model folder_tags {
  folder_id String  @db.Uuid
  tag_id    String  @db.Uuid
  folders   folders @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags      tags    @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([folder_id, tag_id])
}

model folders {
  id                      String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String?                @db.VarChar
  visibility              Visibility?            @default(PUBLIC)
  created_at              DateTime?              @default(now()) @db.Timestamptz(6)
  user_id                 String                 @db.Uuid
  classification_level_id String                 @db.Uuid
  description             String?
  updated_at              DateTime?              @default(now()) @db.Timestamptz(6)
  comments                comments[]
  folder_files            folder_files[]
  folder_tags             folder_tags[]
  classification_levels   classification_levels  @relation(fields: [classification_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                   users                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  follows                 follows[]
  notification_targets    notification_targets[]
  rating_targets          rating_targets[]
}

model follows {
  user_id     String    @db.Uuid
  folder_id   String    @db.Uuid
  followed_at DateTime? @default(now()) @db.Timestamptz(6)
  folders     folders   @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, folder_id])
}

model notification_targets {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  notification_id String        @db.Uuid
  resource_id     String?       @db.Uuid
  folder_id       String?       @db.Uuid
  comment_id      String?       @db.Uuid
  comments        comments?     @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  folders         folders?      @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notifications   notifications @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources       resources?    @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([notification_id, resource_id, folder_id, comment_id])
}

model notifications {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  actor_id             String?                @db.Uuid
  type                 NotificationType?
  message              String?
  is_read              Boolean?               @default(false)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  read_at              DateTime?              @db.Timestamptz(6)
  notification_targets notification_targets[]
  users                users?                 @relation(fields: [actor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rating_targets {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rating_id   String     @db.Uuid
  resource_id String?    @db.Uuid
  folder_id   String?    @db.Uuid
  folders     folders?   @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ratings     ratings    @relation(fields: [rating_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources   resources? @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([rating_id, resource_id, folder_id])
}

model ratings {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String?          @db.Uuid
  value          Int?
  rated_at       DateTime?        @default(now()) @db.Timestamptz(6)
  rating_targets rating_targets[]
  users          users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model resource_tags {
  resource_id String    @db.Uuid
  tag_id      String    @db.Uuid
  resources   resources @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags        tags      @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([resource_id, tag_id])
}

model resources {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                String?                @db.VarChar
  description          String?
  category             String?                @db.VarChar
  visibility           Visibility?            @default(PUBLIC)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  comments             comments[]
  downloads            downloads[]
  folder_files         folder_files[]
  notification_targets notification_targets[]
  rating_targets       rating_targets[]
  resource_tags        resource_tags[]
  uploads              uploads[]
}

model roles {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             RoleType?          @unique
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  user_guild_roles user_guild_roles[]
  users            users[]
}

model sessions {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_token String?   @unique @db.VarChar
  user_id       String?   @db.Uuid
  expires       DateTime? @db.Timestamptz(6)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  id                    String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  level_id              String                @db.Uuid
  name                  String?               @db.VarChar
  description           String?
  created_at            DateTime?             @default(now()) @db.Timestamptz(6)
  folder_tags           folder_tags[]
  resource_tags         resource_tags[]
  classification_levels classification_levels @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, level_id])
}

model uploads {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String?       @db.Uuid
  resource_id String?       @db.Uuid
  file_name   String?       @db.VarChar
  mime_type   String?       @db.VarChar
  file_size   Int?
  s3_key      String?       @db.VarChar
  status      UploadStatus? @default(PENDING)
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  uploaded_at DateTime?     @db.Timestamptz(6)
  resources   resources?    @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_guild_roles {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String?   @db.Uuid
  guild_id  String?   @db.Uuid
  role_name RoleType?
  roles     roles?    @relation(fields: [role_name], references: [name], onDelete: NoAction, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, guild_id, role_name])
}

model users {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String?            @unique @db.VarChar
  username         String?            @unique @db.VarChar
  displayname      String?            @db.VarChar
  password         String?            @db.VarChar
  role_name        RoleType
  birth            String?            @db.VarChar
  avatar           String?            @db.VarChar
  email_verified   Boolean?           @default(false)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  accounts         accounts[]
  comments         comments[]
  downloads        downloads[]
  folders          folders[]
  follows          follows[]
  notifications    notifications[]
  ratings          ratings[]
  sessions         sessions[]
  uploads          uploads[]
  user_guild_roles user_guild_roles[]
  roles            roles              @relation(fields: [role_name], references: [name], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model verification_tokens {
  identifier String?   @db.VarChar
  token      String?   @unique @db.VarChar
  expires    DateTime? @db.Timestamptz(6)

  @@unique([identifier, token])
  @@ignore
}

enum NotificationType {
  UPLOAD
  DOWNLOAD
  COMMENT
  REPLY
  RATING
  FOLLOW
  SYSTEM
}

enum ResourceStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

enum RoleType {
  USER
  ADMIN
}

enum UploadStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Visibility {
  PUBLIC
  PRIVATE
}
