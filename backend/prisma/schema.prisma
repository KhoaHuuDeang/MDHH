generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]   @relation("UserRoles")
  guildRoles UserGuildRole[]   @relation("DiscordRoles")
  
  @@map("roles")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?   
  displayname  String   
  password  String?  // Made nullable for OAuth
  roleId    String  
  birth     String?
  avatar    String?  // Avatar from OAuth providers
  emailVerified Boolean @default(false) // Email verification status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  role      Role     @relation("UserRoles",fields: [roleId], references: [id])
  accounts  Account[]
  sessions  Session[]
  guildRoles UserGuildRole[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  metadata          Json?   // Discord guilds, roles, etc.
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique                 //tạo bằng randomByte, chuỗi hóa hệ 10 
  userId       String                           // khóa ngoại của bảng user
  expires      DateTime                         //hardcode 30 ngày 
  createdAt    DateTime @default(now())       
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  // ràng buộc nhiều session chỉ thuộc về  1 user 
  @@map("sessions")
}


model UserGuildRole  {
  id String  @id @default(cuid())
  userId String
  guildId String
  roleId String  

  //relationship
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role   @relation("DiscordRoles", fields: [roleId], references: [id])

  @@unique([userId, guildId, roleId]) 
  @@map("user_guild_roles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

